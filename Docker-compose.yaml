services:
  usertest:
    build: 
      context: .
    container_name: usertest
    restart: always
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - MB_URL=${MB_URL}

    ports:
      - "8088:8088"
    depends_on:
      - postgresdb
    networks:
      - test
  consumer:
    build: 
      context: .
      dockerfile: Dockerfile.consumer
    container_name: consumer
    restart: always
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - MB_URL=${MB_URL}

    depends_on:
      - message-broker
    networks:
      - test
  postgresdb:
    image: postgres:latest
    container_name: postgres_container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
      - DATABASE_HOST=${DB_HOST}
    ports:
      - '1234:5432'
    volumes:
      - ./pg/pg_data:/var/lib/postgresql/data
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      #- ./pg/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    networks:
      - test
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - 5672:5672
      - 15672:15672
    #volumes:
    #  - ${HOME}/dev-rabbitmq/data/:/var/lib/rabbitmq
    #  - ${HOME}/dev-rabbitmq/log/:/var/log/rabbitmq
    restart: always
    networks:
      - test

#  postgresdb_test:
#    image: postgres:latest
#    container_name: postgres_test_container
#    environment:
#      - POSTGRES_USER=${TEST_DB_USER}
#      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
#      - POSTGRES_DB=${TEST_DB_NAME}
#      - DATABASE_HOST=${TEST_DB_HOST}
#    ports:
#      - '4568:5432'
#    volumes:
#      - ./pg/pg_data_test:/var/lib/postgresql/data
#      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
#      #- ./pg/pg_hba_test.conf:/var/lib/postgresql/data/pg_hba.conf
#    networks:
#      - test

volumes:
  pg_data:
  pg_data_test:

# Networks to be created to facilitate communication between containers
networks:
  test:
    driver: bridge

